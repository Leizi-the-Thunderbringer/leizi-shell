name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13]
        include:
          - os: ubuntu-latest
            install_deps: sudo apt-get update && sudo apt-get install -y libreadline-dev
          - os: macos-latest
            install_deps: brew install readline
          - os: macos-13
            install_deps: brew install readline

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: ${{ matrix.install_deps }}

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel

      - name: Test basic functionality
        run: |
          cd ${{github.workspace}}/build
          echo "version" | ./lezi || true
          echo "help" | ./lezi || true
          echo 'echo "Hello, Lezi!"' | ./lezi || true
          echo "exit 0" | ./lezi

  build-release:
    name: Build Release Binaries
    needs: test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux_x64
            install_deps: sudo apt-get update && sudo apt-get install -y libreadline-dev
          - os: macos-latest
            platform: darwin_arm64
            install_deps: brew install readline
          - os: macos-13
            platform: darwin_x64
            install_deps: brew install readline

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: ${{ matrix.install_deps }}

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release --parallel

      - name: Install
        run: cmake --install ${{github.workspace}}/build

      - name: Package
        run: |
          cd ${{github.workspace}}/install/bin
          tar -czf ../../lezi-${{ matrix.platform }}.tar.gz lezi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./lezi-${{ matrix.platform }}.tar.gz
          asset_name: lezi-${{ matrix.platform }}.tar.gz
          asset_content_type: application/gzip

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libreadline-dev cppcheck clang-tidy

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Debug

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --std=c++20 --suppress=missingInclude src/ || true

      - name: Run clang-tidy
        run: |
          clang-tidy src/main.cpp -p build/ || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (FS Scan)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'          # 扫描整个文件系统（当前目录）
          format: 'sarif'          # 输出 SARIF 格式报告
          output: 'trivy-results.sarif'  # SARIF 文件名
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'  # 检测所有严重级别
          ignore-unfixed: false    # 不忽略未修复的漏洞
          vuln-type: 'os,library'  # 扫描操作系统和库漏洞
          cache-dir: '/home/runner/work/lezi-shell/lezi-shell/.cache/trivy'  # 缓存目录
          cache: true              # 启用缓存加速扫描
          skip-setup-trivy: false  # 不跳过 Trivy 安装（由 action 自动处理）

      - name: Show Trivy Scan Results (Optional - 查看 SARIF 文件内容)
        run: |
          echo "Trivy 扫描完成，SARIF 文件已生成: trivy-results.sarif"
          # 如果需要查看 SARIF 内容，可以取消注释下一行（但 SARIF 是结构化数据，直接看可能不易读）
          # cat trivy-results.sarif